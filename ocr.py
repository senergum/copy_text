from utils.fixers import fix_main_block
import pytesseract
from PIL import ImageEnhance
import pytesseract
pytesseract.pytesseract.tesseract_cmd = r"C:\Program Files\Tesseract-OCR\tesseract.exe"

def recognize_text(image):
    processed_image = image.convert('L')
    enhancer = ImageEnhance.Contrast(processed_image)
    processed_image = enhancer.enhance(1.2)
    configs = [r'--oem 3 --psm 6', r'--oem 3 --psm 7', r'--oem 3 --psm 8']
    best_text = ""
    for config in configs:
        text = pytesseract.image_to_string(processed_image, lang='rus+eng', config=config)
        if len(text.strip()) > len(best_text.strip()):
            best_text = text
    text = best_text.strip()
    corrections = {
    'папе': '__',
    'паре': 'name',
    'name_': 'name__',
    '_name': '__name',
    '_name_': '__name__',
    '_main_': '__main__',
    'main_': 'main__',
    '_main': '__main',
    'гип': 'run',
    'run(': 'run(',
    'run ()': 'run()',
    'арр': 'app',
    'app.': 'app.',
    'app .': 'app.',
    'app-run()': 'app.run()',
    'app.гип()': 'app.run()',
    'app.run ()': 'app.run()',
    'app. run()': 'app.run()',
    'if': 'if',
    'if ': 'if ',
    'if_': 'if_',
    'if__': 'if__',
    'if_name__': 'if __name__',
    'if name__': 'if __name__',
    'if_name': 'if __name',
    'SaxpaTute': 'Захватить',
    'Saxpatute': 'Захватить',
    'Texcr': 'Текст',
    'Texт': 'Текст',
    'Тexст': 'Текст',
    'Ctr1': 'Ctrl',
    'CtrI': 'Ctrl',
    'Ctri': 'Ctrl',
    'Bsxoa': 'Выход',
    'Bыxод': 'Выход',
    'Bыxoд': 'Выход',
    'threading. Thread': 'threading.Thread',
    'threading.Thread': 'threading.Thread',
    'threading Thread': 'threading.Thread',
    'target-self': 'target=self',
    'target=self': 'target=self',
    'target = self': 'target=self',
    'self.on_hotkey pressed': 'self.on_hotkey_pressed',
    'self.on_hotkey_pressed': 'self.on_hotkey_pressed',
    'self.onhotkey_pressed': 'self.on_hotkey_pressed',
    'self.tray_icon.run': 'self.tray_icon.run',
    'self.tray_icon.run': 'self.tray_icon.run',
    'self.tray_icon run': 'self.tray_icon.run',
    'tray_thread.start()': 'tray_thread.start()',
    'tray_thread.start ()': 'tray_thread.start()',
    'tray_thread. start()': 'tray_thread.start()',
    '“': '"',
    '”': '"',
    '„': '"',
    '«': '"',
    '»': '"',
    '‘': "'",
    '’': "'",
    '`': "'",
    '´': "'",
    'import': 'import',
    'from': 'from',
    'class': 'class',
    'def': 'def',
    'return': 'return',
    'self': 'self',
    'try': 'try',
    'except': 'except',
    'for': 'for',
    'in': 'in',
    'while': 'while',
    'True': 'True',
    'False': 'False',
    'None': 'None',
    'and': 'and',
    'or': 'or',
    'not': 'not',
    'is': 'is',
    '==': '==',
    '=': '=',
    '!=': '!=',
    '<': '<',
    '>': '>',
    '<=': '<=',
    '>=': '>=',
    '+': '+',
    '-': '-',
    '*': '*',
    '/': '/',
    '//': '//',
    '%': '%',
    '(': '(',
    ')': ')',
    '[': '[',
    ']': ']',
    '{': '{',
    '}': '}',
    ':': ':',
    ';': ';',
    ',': ',',
    '.': '.',
    '...': '...',
    '@': '@',
    '#': '#',
    '\\': '\\',
    '/': '/',
    '|': '|',
    '&': '&',
    '^': '^',
    '~': '~',
    '**': '**',
    '+=': '+=',
    '-=': '-=',
    '*=': '*=',
    '/=': '/=',
    '//=': '//=',
    '%=': '%=',
    '**=': '**=',
    '&=': '&=',
    '|=': '|=',
    '^=': '^=',
    '>>=': '>>=',
    '<<=': '<<=',
    '->': '->',
    ' ': ' ',
    '\t': '\t',
    '\n': '\n'
}
    for wrong, correct in corrections.items():
        text = text.replace(wrong, correct)
    text = text.replace(' _', '_').replace('_ ', '_')
    text = fix_main_block(text)
    lines = text.split('\n')
    cleaned_lines = [line.strip() for line in lines if line.strip()]
    return '\n'.join(cleaned_lines)